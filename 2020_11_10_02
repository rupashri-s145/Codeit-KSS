Maximize product of subarray sum with its minimum element
Given an array arr[] consisting of N positive integers, the task is to find the maximum product of subarray sum with the minimum element of that subarray.
Examples:
Input: arr[] = {3, 1, 6, 4, 5, 2}
Output: 60
Explanation:
The required maximum product can be obtained using subarray {6, 4, 5}
Therefore, maximum product = (6 + 4 + 5) * (4) = 60
Input: arr[] = {4, 1, 2, 9, 3}
Output: 81
Explanation:
The required maximum product can be obtained using subarray {9}
Maximum product = (9)* (9) = 81

-----------------------------------------------------------------------------------------------------------------------------

Code:
def maxSumProduct(arr):
  n=len(arr)
  l=[0]*n
  r=[0]*n
  sub_arr_sum=[0]*n
  sub_arr_sum[0]=arr[0]
  for i in range(1,n):
    sub_arr_sum[i]=sub_arr_sum[i-1]+arr[i]
  start=[]
  for i in range(1,n):
    while len(start)!=0 and arr[start[-1]]>=arr[i]:
      start.pop()
    if(len(start)!=0):
      l[i]=start[-1]+1
    else:
      l[i]=0
    start.append(i)
    
  start=[]
  for i in range(n-1,-1,-1):
    while len(start)!=0 and arr[start[-1]]>=arr[i]:
      start.pop()
    if(len(start)!=0):
      r[i]=start[-1]-1
    else:
      r[i]=n-1
    start.append(i)
    
  max_sum=0

  for i in range(n):
    temp=arr[i]*(sub_arr_sum[r[i]]-(0 if l[i]==0 else sub_arr_sum[l[i]-1]))
    if temp>max_sum:
      max_sum=temp
  return max_sum

arr = list(map(int,input().split()))
print(maxSumProduct(arr))
